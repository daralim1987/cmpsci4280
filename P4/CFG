P2 BNF:

<program>   ->      void <vars> <block>                                     
<block>     ->      begin <vars> <stats> end                                
<vars>      ->      empty | let Identifier = Integer <vars>                 
<expr>      ->      <A> / <expr> | <A> * <expr> | <A>
<A>         ->      <M> + <A> | <M> - <A> | <M>
<M>         ->      - <M> |  <R>
<R>         ->      ( <expr> ) | Identifier | Integer
<stats>     ->      <stat>  <mStat>
<mStat>     ->      empty |  <stat>  <mStat>
<stat>      ->      <in> | <out> | <block> | <cond> | <loop> | <assign>
<in>        ->      read ( Identifier ) :
<out>       ->      print ( <expr>  ) :
<cond>      ->      cond ( <expr> <RO> <expr> ) <stat>
<loop>      ->      iter ( <expr> <RO> <expr> ) <stat>
<assign>    ->      Identifier  = <expr> :
<RO>        ->      < | <  = | >  | >  = | =  =  |   =  




//My BNF

<program>  ->     <vars> <block>
<block>       ->      Begin <vars> <stats> End
<vars>         ->      empty | INT Identifier Integer <vars> 
<expr>        ->      <A> + <expr> | <A> - <expr> | <A>
<A>             ->        <N> * <A> | <N>
<N>             ->       <M> / <N> | <M>
<M>              ->     - <M> |  <R>
<R>              ->      [ <expr> ] | Identifier | Integer
<stats>         ->      <stat> : <mStat>
<mStat>       ->      empty |  <stat>  :  <mStat>
<stat>           ->      <in> | <out> | <block> | <if> | <loop> | <assign>
<in>              ->      Read [ Identifier ]  
<out>            ->      Output [ <expr> ]
<if>               ->      IFF [ <expr> <RO> <expr> ] <stat>
<loop>          ->      Loop [ <expr> <RO> <expr> ] <stat>
<assign>       ->      Identifier  = <expr>  
<RO>            ->      < | = <  | >  | = > | =  =  |   =    